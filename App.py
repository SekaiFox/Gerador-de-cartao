import tkinter as tk
from tkinter import ttk, messagebox
import random
from datetime import datetime
import pandas as pd
from io import BytesIO
from tkinter.filedialog import asksaveasfilename

# --- LISTAS PARA GERA√á√ÉO DE NOMES ---
LISTA_PRIMEIROS_NOMES = [
    # Nomes masculinos
    "Miguel", "Arthur", "Bernardo", "Heitor", "Davi", "Lorenzo", "Th√©o", "Pedro", "Gabriel", "Enzo",
    "Matheus", "Lucas", "Benjamin", "Nicolas", "Guilherme", "Rafael", "Joaquim", "Samuel", "Enzo Gabriel",
    "Jo√£o Miguel", "Henrique", "Gustavo", "Murilo", "Pedro Henrique", "Jo√£o Pedro", "Jo√£o Lucas", "Felipe",
    "Jo√£o Gabriel", "Leonardo", "Fernando", "Tom√°s", "Ant√¥nio", "Daniel", "Vicente", "Eduardo", "Caio",
    "Vitor", "Isaac", "Lucca", "Jo√£o", "Ben√≠cio", "Augusto", "Jo√£o Paulo", "Ot√°vio", "Ricardo", "Carlos",
    # Nomes femininos
    "Helena", "Alice", "Laura", "Manuela", "Sophia", "Isabella", "Lu√≠sa", "Helo√≠sa", "Cec√≠lia", "Mait√™",
    "Maria Clara", "Elisa", "Liz", "J√∫lia", "Maria Luiza", "Valentina", "Maria Alice", "Beatriz", "Maria",
    "L√≠via", "Antonella", "Mariana", "Luna", "Ana Clara", "Ana J√∫lia", "Ana Laura", "Maria J√∫lia", "Sofia",
    "Clara", "Maria Eduarda", "Ana", "Melissa", "Yasmin", "Maria Cec√≠lia", "Maria Helena", "Stella", "Ana Beatriz",
    "Aurora", "Ana Lu√≠sa", "Ana Sophia", "Gabriela", "Lorena", "Isabel", "Amanda", "Catarina", "Vit√≥ria"
]

LISTA_SOBRENOMES = [
    "Silva", "Santos", "Oliveira", "Souza", "Rodrigues", "Ferreira", "Alves", "Pereira", "Lima", "Gomes",
    "Costa", "Ribeiro", "Martins", "Carvalho", "Almeida", "Lopes", "Soares", "Fernandes", "Vieira", "Barbosa",
    "Rocha", "Dias", "Nascimento", "Andrade", "Moreira", "Nunes", "Marques", "Machado", "Mendes", "Freitas",
    "Cardoso", "Ramos", "Gon√ßalves", "Monteiro", "Pinto", "Cruz", "Correia", "Cunha", "Azevedo", "Cavalcanti",
    "Peixoto", "Miranda", "Reis", "Campos", "Arag√£o", "Barros", "Moraes", "Melo", "Neto", "Nogueira"
]
INICIAIS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

# --- CONFIGURA√á√ïES DE CART√ïES (IIN/BIN) ---
CONFIG_CARTOES = {
    # Cart√µes Gen√©ricos
    "Visa (Gen√©rico)": {
        "prefixos": ["4"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Gen√©rico"
    },
    "Mastercard (Gen√©rico)": {
        "prefixos": ["51", "52", "53", "54", "55"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Gen√©rico"
    },
    "American Express (Gen√©rico)": {
        "prefixos": ["34", "37"],
        "comprimento": 15,
        "bandeira": "American Express",
        "banco": "Gen√©rico"
    },
    "Elo (Gen√©rico)": {
        "prefixos": ["636368", "504175", "5067", "509", "627780"],
        "comprimento": 16,
        "bandeira": "Elo",
        "banco": "Gen√©rico"
    },
    
    # Banco do Brasil
    "BB Visa Gold": {
        "prefixos": ["498407"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Banco do Brasil"
    },
    "BB Visa Infinite": {
        "prefixos": ["498408"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Banco do Brasil"
    },
    "BB Mastercard Gold": {
        "prefixos": ["546452"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Banco do Brasil"
    },
    "BB Mastercard Black": {
        "prefixos": ["552289"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Banco do Brasil"
    },
    "BB Elo Mais": {
        "prefixos": ["650487"],
        "comprimento": 16,
        "bandeira": "Elo",
        "banco": "Banco do Brasil"
    },

    # Ita√∫
    "Ita√∫ Mastercard Gold": {
        "prefixos": ["511258"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Ita√∫"
    },
    "Ita√∫ Visa Gold": {
        "prefixos": ["418049"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Ita√∫"
    },

    # Bradesco
    "Bradesco Visa Gold": {
        "prefixos": ["407941"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Bradesco"
    },
    "Bradesco Mastercard Gold": {
        "prefixos": ["516988"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Bradesco"
    },
    "Bradesco Elo Grafite": {
        "prefixos": ["636297"],
        "comprimento": 16,
        "bandeira": "Elo",
        "banco": "Bradesco"
    },

    # Santander
    "Santander Visa Infinite": {
        "prefixos": ["422642"],
        "comprimento": 16,
        "bandeira": "Visa",
        "banco": "Santander"
    },
    "Santander Mastercard Black": {
        "prefixos": ["525741"],
        "comprimento": 16,
        "bandeira": "Mastercard",
        "banco": "Santander"
    }
}

def gerar_nome_ficticio():
    """Gera um nome com inicial do meio, ex: Marcos C. Leon"""
    primeiro = random.choice(LISTA_PRIMEIROS_NOMES)
    sobrenome = random.choice(LISTA_SOBRENOMES)
    inicial = random.choice(INICIAIS)
    return f"{primeiro} {inicial}. {sobrenome}"

def calcular_luhn_dv(base_numero):
    """Calcula o d√≠gito verificador usando o Algoritmo de Luhn (M√≥dulo 10)"""
    pesos = [2, 1]
    soma_produtos = 0
    base_invertida = base_numero[::-1]
    
    for i, digito_str in enumerate(base_invertida):
        peso = pesos[i % len(pesos)]
        produto = int(digito_str) * peso
        soma_produtos += (produto // 10) + (produto % 10)
        
    resto = soma_produtos % 10
    dv = 0 if resto == 0 else (10 - resto)
    return str(dv)

def gerar_cartao_credito(config_cartao):
    """Gera um conjunto completo de dados de cart√£o de cr√©dito."""
    # 1. N√∫mero do Cart√£o (com Luhn)
    prefixo = random.choice(config_cartao["prefixos"])
    comprimento = config_cartao["comprimento"]
    
    # Gera o "meio" do cart√£o
    comprimento_meio = comprimento - len(prefixo) - 1
    meio_cartao = ''.join([str(random.randint(0, 9)) for _ in range(comprimento_meio)])
    
    # Base para c√°lculo do DV
    base_calculo = prefixo + meio_cartao
    dv = calcular_luhn_dv(base_calculo)
    
    numero_cartao = base_calculo + dv
    
    # 2. Nome Fict√≠cio
    nome_cartao = gerar_nome_ficticio()
    
    # 3. Data de Validade (MM/AA)
    hoje = datetime.now()
    ano_futuro = hoje.year + random.randint(1, 5)
    mes_futuro = random.randint(1, 12)
    validade = f"{mes_futuro:02d}/{ano_futuro % 100:02d}"
    
    # 4. CVV
    if config_cartao["bandeira"] == "American Express":
        cvv = f"{random.randint(1000, 9999):04d}"
    else:
        cvv = f"{random.randint(0, 999):03d}"
        
    return (
        nome_cartao, 
        config_cartao["banco"], 
        config_cartao["bandeira"], 
        numero_cartao, 
        validade, 
        cvv
    )

class GeradorCartaoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gerador de Cart√µes de Cr√©dito")
        self.root.geometry("1000x700")
        
        # Configurar tema escuro
        self.root.configure(bg='#1e1e1e')
        style = ttk.Style()
        style.theme_use('default')
        
        # Configura√ß√µes de cores do tema escuro
        style.configure('TFrame', background='#1e1e1e')
        style.configure('TLabel', background='#1e1e1e', foreground='#ffffff')
        style.configure('TButton', background='#2d2d2d', foreground='#ffffff')
        style.configure('Treeview', 
                      background='#2d2d2d', 
                      fieldbackground='#2d2d2d', 
                      foreground='#ffffff')
        style.configure('TCombobox', 
                      background='#2d2d2d', 
                      fieldbackground='#2d2d2d', 
                      foreground='#ffffff')
        
        # Frame principal
        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar expans√£o da janela
        root.grid_rowconfigure(0, weight=1)
        root.grid_columnconfigure(0, weight=1)
        
        # T√≠tulo e Aviso
        title_frame = ttk.Frame(main_frame)
        title_frame.grid(row=0, column=0, columnspan=2, pady=(0,20))
        
        ttk.Label(title_frame, 
                 text="üí≥ Gerador de Cart√µes de Cr√©dito (para Testes)", 
                 font=('Helvetica', 16, 'bold'),
                 foreground='#00ff00').grid(row=0, column=0, pady=10)
        
        ttk.Label(title_frame, 
                 text="Estes dados s√£o 100% FALSOS e devem ser usados APENAS em ambientes de teste",
                 foreground="#ff6b6b",
                 font=('Helvetica', 10, 'bold')).grid(row=1, column=0, pady=5)
        
        # Frame de controles
        controls_frame = ttk.Frame(main_frame)
        controls_frame.grid(row=2, column=0, columnspan=2, pady=(0,20))
        
        # Organizar cart√µes por banco
        bancos = sorted(list(set(config["banco"] for config in CONFIG_CARTOES.values())))
        cartoes_por_banco = {banco: [] for banco in bancos}
        for nome, config in CONFIG_CARTOES.items():
            cartoes_por_banco[config["banco"]].append(nome)
        
        # Sele√ß√£o do banco
        ttk.Label(controls_frame, text="Banco:").grid(row=0, column=0, pady=5, padx=5, sticky=tk.W)
        self.banco_combo = ttk.Combobox(controls_frame, values=bancos, width=30)
        self.banco_combo.grid(row=0, column=1, pady=5, padx=5, sticky=tk.W)
        self.banco_combo.set(bancos[0])
        self.banco_combo.bind('<<ComboboxSelected>>', self.atualizar_cartoes)
        
        # Sele√ß√£o do tipo de cart√£o
        ttk.Label(controls_frame, text="Cart√£o:").grid(row=0, column=2, pady=5, padx=5, sticky=tk.W)
        self.tipo_cartao = ttk.Combobox(controls_frame, width=40)
        self.tipo_cartao.grid(row=0, column=3, pady=5, padx=5, sticky=tk.W)
        
        # Quantidade
        ttk.Label(controls_frame, text="Quantidade:").grid(row=1, column=0, pady=5, padx=5, sticky=tk.W)
        self.quantidade = ttk.Spinbox(controls_frame, from_=1, to=1000, width=10)
        self.quantidade.grid(row=1, column=1, pady=5, padx=5, sticky=tk.W)
        self.quantidade.set(10)
        
        # Bot√µes
        button_frame = ttk.Frame(controls_frame)
        button_frame.grid(row=1, column=2, columnspan=2, pady=10)
        
        ttk.Button(button_frame, 
                  text="üîÑ Gerar Cart√µes", 
                  command=self.gerar_cartoes,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, 
                  text="üì• Exportar Excel", 
                  command=self.exportar_excel).pack(side=tk.LEFT, padx=5)
        
        # Frame para resultados
        results_frame = ttk.Frame(main_frame)
        results_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        main_frame.grid_rowconfigure(3, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # √Årea de resultados com estilo escuro
        self.resultado = ttk.Treeview(results_frame, 
                                    columns=("Nome", "Banco", "Bandeira", "N√∫mero", "Validade", "CVV"),
                                    show="headings", 
                                    style='Treeview')
        
        # Configurar colunas
        self.resultado.heading("Nome", text="Nome no Cart√£o")
        self.resultado.heading("Banco", text="Banco Emissor")
        self.resultado.heading("Bandeira", text="Bandeira")
        self.resultado.heading("N√∫mero", text="N√∫mero do Cart√£o")
        self.resultado.heading("Validade", text="Validade")
        self.resultado.heading("CVV", text="CVV")
        
        # Ajustar largura das colunas
        self.resultado.column("Nome", width=200)
        self.resultado.column("Banco", width=150)
        self.resultado.column("Bandeira", width=100)
        self.resultado.column("N√∫mero", width=160)
        self.resultado.column("Validade", width=80)
        self.resultado.column("CVV", width=60)
        
        # Configurar grid com scrollbar
        self.resultado.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.resultado.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.resultado.configure(yscrollcommand=scrollbar.set)
        
        # Configurar expans√£o da √°rea de resultados
        results_frame.grid_rowconfigure(0, weight=1)
        results_frame.grid_columnconfigure(0, weight=1)
        
        # Inicializar lista de cart√µes
        self.atualizar_cartoes(None)

    def atualizar_cartoes(self, event):
        """Atualiza a lista de cart√µes baseado no banco selecionado"""
        banco_selecionado = self.banco_combo.get()
        cartoes_banco = [nome for nome, config in CONFIG_CARTOES.items() 
                        if config["banco"] == banco_selecionado]
        self.tipo_cartao['values'] = cartoes_banco
        if cartoes_banco:
            self.tipo_cartao.set(cartoes_banco[0])
            
    def gerar_cartoes(self):
        # Limpar tabela
        for item in self.resultado.get_children():
            self.resultado.delete(item)
            
        try:
            quantidade = int(self.quantidade.get())
            if quantidade < 1 or quantidade > 1000:
                raise ValueError("Quantidade deve ser entre 1 e 1000")
                
            tipo_cartao = self.tipo_cartao.get()
            if not tipo_cartao:
                raise ValueError("Selecione um tipo de cart√£o")
                
            config = CONFIG_CARTOES[tipo_cartao]
            
            # Gerar e mostrar cart√µes com tags alternadas para melhor visualiza√ß√£o
            for i in range(quantidade):
                cartao = gerar_cartao_credito(config)
                tag = 'par' if i % 2 == 0 else 'impar'
                self.resultado.insert("", tk.END, values=cartao, tags=(tag,))
                
            messagebox.showinfo("Sucesso", f"{quantidade} cart√µes gerados com sucesso!")
        except ValueError as e:
            messagebox.showerror("Erro de Valida√ß√£o", str(e))
        except Exception as e:
            messagebox.showerror("Erro", f"Erro inesperado: {str(e)}")
    
    def exportar_excel(self):
        if not self.resultado.get_children():
            messagebox.showwarning("Aviso", "Gere alguns cart√µes primeiro!")
            return
            
        try:
            # Preparar dados
            dados = []
            for item in self.resultado.get_children():
                dados.append(self.resultado.item(item)["values"])
                
            df = pd.DataFrame(dados, columns=["Nome no Cart√£o", "Banco Emissor", 
                                            "Bandeira", "N√∫mero do Cart√£o",
                                            "Validade (MM/AA)", "CVV"])
            
            # Pedir local para salvar
            filename = asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                title="Salvar cart√µes como"
            )
            
            if filename:
                df.to_excel(filename, index=False)
                messagebox.showinfo("Sucesso", f"Arquivo salvo com sucesso em:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("Erro ao exportar", str(e))

if __name__ == "__main__":
    root = tk.Tk()
    app = GeradorCartaoApp(root)
    root.mainloop()